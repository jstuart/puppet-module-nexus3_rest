import org.sonatype.nexus.blobstore.api.BlobStoreConfiguration

def blobStoreManager = container.lookup(org.sonatype.nexus.blobstore.api.BlobStoreManager.class.name)

// -----
// Important: BlobStoreConfiguration was a class in <= 3.19 and became
// an interface in >= 3.20.  Code cannot be (easily) made backwards
// compatible.
// -----

// Compatible with <= 3.19
//config = new BlobStoreConfiguration([
//  name: '<%= resource[:name] %>',
//  type: '<%= resource[:type] %>',
//  attributes: [:],
//])

// Compatible with >= 3.20
BlobStoreConfiguration config = blobStoreManager.newConfiguration()
config.setName('<%= resource[:name] %>')
config.setType('<%= resource[:type] %>')
config.setAttributes([:])

<%- if resource[:soft_quota_enabled] == :true -%>
config.attributes.blobStoreQuotaConfig = [
  quotaType: '<%= resource[:quota_type] %>',
  quotaLimitBytes: new Long(<%= resource[:quota_limit_bytes].to_i * 1000000 %>),
]
<%- end -%>

<%- if resource[:type] == 'File' -%>
config.attributes.file = [:]
config.attributes.file.path = '<%= resource[:path] %>'
<%- else -%>
config.attributes.s3 = [:]
config.attributes.s3.bucket = '<%= resource[:bucket] %>'
config.attributes.s3.prefix = '<%= resource[:prefix] %>'
config.attributes.s3.accessKeyId = '<%= resource[:access_key_id] %>'
config.attributes.s3.secretAccessKey = '<%= resource[:secret_access_key] %>'
config.attributes.s3.sessionToken = '<%= resource[:session_token] %>'
config.attributes.s3.assumeRole = '<%= resource[:assume_role] %>'
config.attributes.s3.region = '<%= resource[:region] %>'
config.attributes.s3.endpoint = '<%= resource[:endpoint] %>'
config.attributes.s3.expiration = <%= resource[:expiration].to_i %>
config.attributes.s3.signertype = '<%= resource[:signertype] %>'
config.attributes.s3.forcepathstyle = '<%= resource[:forcepathstyle] %>'
<%- end -%>

blobStoreManager.create(config)
